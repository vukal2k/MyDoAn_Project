@model IdentitySample.Models.EditUserAccountViewModel

@{
    ViewBag.Title = "Edit Profile | User";
    Layout = "~/Views/Shared/_LayoutGuest.cshtml";
}

<h2>Edit Profile</h2>

<div class="container">
    @using (Html.BeginForm("UserProfile", "Account", null, FormMethod.Post, htmlAttributes: new { @id = "formAccountAdmin" }))
    {
        @Html.AntiForgeryToken()


        if (ViewBag.Errors != null)
        {
            <ul>
                @foreach (var item in (List<string>)ViewBag.Errors)
                {
                    <li class="text-danger">@item</li>
                }
            </ul>
        }

        <input type="hidden" name="Id" value="@Model.Id" />

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <h4>@Model.Username</h4>
                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input name="Email" id="Email" type="email" value="@Model.Email" class="form-control" />
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CurrentJob, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CurrentJob, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CurrentJob, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CountExperience, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input name="CountExperience" value="@Model.CountExperience" id="CountExperience" type="number" step="0.1" class="form-control" />
                    @Html.ValidationMessageFor(model => model.CountExperience, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TimeUnit, htmlAttributes: new { @class = "control-label col-md-2" })
                @{
                    var listTimeUnit = new List<string>
                                {
                                    "Week","Month","Year"
                                };
                }
                <div class="col-md-10">
                    <select name="TimeUnit" id="TimeUnit" class="form-control">
                        <option value="">-- Choose Unit --</option>
                        @foreach (var item in listTimeUnit)
                        {
                            if (item.Equals(Model.TimeUnit))
                            {
                                <option selected value="@item">@item</option>
                            }
                            else
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </select>
                    <label class="errors" id="TimeUnitError"></label>
                    @Html.ValidationMessageFor(model => model.TimeUnit, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-lg-offset-2 col-md-10">
                    <a class="btn btn-warning" onclick="$('#modalChangePassword').modal('show')">Change Password</a>
                    <input type="submit" value="Save" id="btnSubmit" class="btn btn-success" />
                </div>
            </div>
        </div>
    }
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<!-- Modal -->
<div id="modalChangePassword" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Change password</h4>
            </div>
            <div class="modal-body" id="divContentChangePw">
                <div class="form-horizontal">
                    @Html.Action("ChangePassword", "Manage")
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts
{
    <script>
        $(document).ready(() => {
            $('#formAccountAdmin').validate({
                errorClass: 'errors',
                rules: {
                    Email: {
                        required: true
                    },
                    FullName: {
                        required: true,
                        maxlength: 200
                    }
                },
                messages: {
                    Email: {
                        required: "Email is required"
                    },
                    FullName: {
                        required: "FullName is required",
                        maxlength: "Max length is 200"
                    }
                },
                highlight: function (element) {
                    $(element).parent().addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).parent().removeClass('has-error');
                },
            });

            $("#btnSubmit").click(function () {
                var valid = true;
                if ($("#CountExperience").val() != "" && $("#TimeUnit").val() == "") {
                    $("#TimeUnit").parent().addClass('has-error');
                    $("#TimeUnitError").text("Time unit experience is required");
                    valid = false;
                }
                if ($("#ConfirmPassword").val() != $("#Password").val()) {
                    $("#ConfirmPassword").parent().addClass('has-error');
                    $("#ConfirmPasswordError").text("Re-password is not match");
                    valid = false;
                }
                return $("#formAccountAdmin").valid() && valid;
            })

            $("#sidebar1").addClass("active");
        });
    </script>
}