@model DTO.Project

@using COMMON;
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Your Project";
    Layout = "~/Views/Shared/_LayoutProject.cshtml";
}


<link href="~/Content/jquery.datetimepicker.min.css" rel="stylesheet" />

<div class="container">
    <h2>Infomation</h2>
    @using (Html.BeginForm("Infomation", "Project", FormMethod.Post, new { @id = "form" }))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" name="Id" value="@Model.Id" />

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @{
                var errors = (List<string>
                    )ViewBag.Errors;
                if (errors != null && errors.Any())
                {
                    <ul class="list-group">
                        @foreach (var item in errors)
                        {
                            <li class="list-group-item-danger">@item</li>
                        }
                    </ul>
                }
            }
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input name="Name" id="Name" type="text" class="form-control" value="@Model.Name" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">PM</label>
                <div class="col-md-10">
                    @{
                        string ownerValue = "";
                        if (Model != null && Model.Name != null)
                        {
                            ownerValue = Model.CreatedBy;
                        }
                    }
                    <select name="CreatedBy" id="CreatedBy" class="form-control selectpicker" data-show-subtext="true" data-live-search="true">
                        <option value="0">-- Choose PM --</option>
                        @foreach (var item in (IEnumerable<DTO.UserInfo>)ViewBag.GetUserDoNotInProject)
                        {
                            if (item.UserName.Equals(ownerValue) && !string.IsNullOrEmpty(ownerValue))
                            {
                                <option value="@item.UserName" selected>@item.UserName</option>
                            }
                            else
                            {
                                <option value="@item.UserName">@item.UserName</option>
                            }
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.From, htmlAttributes: new { @class = "control-label col-md-2" })
                <input type="text" onchange="ValidateDateTo()" autocomplete="off" value="@Model.From.ToString("MM/dd/yyyy")" name="From" class="control-label col-md-3" id="from" style="margin-left:1.3% !important" />
                <input type="hidden" name="From" id="fromValue" />
                @{
                    string toValue = "";
                    if (Model != null && Model.To != null)
                    {
                        var dateTo = (DateTime)Model.To;
                        toValue = dateTo.ToString("MM/dd/yyyy");
                    }
                }
                @Html.LabelFor(model => model.To, htmlAttributes: new { @class = "control-label col-md-2" })
                <input type="text" autocomplete="off" value="@toValue" class="control-label col-md-3" id="to" />
                <input type="hidden" name="To" id="toValue" />
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @{
                        string descriptionValue = "";
                        if (Model != null && Model.Description != null)
                        {
                            var des = Model.Description;
                            descriptionValue = des.ToString();
                        }
                    }
                    <textarea name="Description" id="Description" class="form-control">@descriptionValue</textarea>
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Watcher</label>
                <div class="col-md-10">
                    <div>
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Fullname</th>
                                    <th>Current Job</th>
                                    <th>Company</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="listMember">
                                @{
                                    var module = Model.Modules.Where(m => m.Title.Equals(COMMON.HardFixJobRoleTitle.Watcher)).FirstOrDefault();
                                    foreach (var item in Model.GetMemberByModule(module.Id))
                                    {
                                        if (!item.UserName.Equals(Model.CreatedBy))
                                        {
                                            @Html.Partial("~/Views/Project/AddWatcher.cshtml", item)
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <label style="width:100% !important" onclick="$('#memberModal').modal('show')" class="btn btn-default"><i class="fas fa-plus-circle"></i></label>
                </div>
            </div>
            <input type="hidden" name="members" id="members" />


            <h2 class="h2">Modules</h2>
            @foreach (var item in Model.Modules.Where(m => m.IsActive && !m.Title.Equals(COMMON.HardFixJobRoleTitle.Watcher)))
            {
                <hr />
                <div class="form-group">
                    <div class="col-md-2"></div>
                    <div class="col-md-10">
                        <div class="h4"><b>@item.Title</b> </div> | <a href="@Url.Action("Edit","Module",new { id = item.Id})">Edit</a>
                    </div>
                </div>
                <div class="form-group">
                    @*<a href="@Url.Action("Edit","Module",new { id = item.Id})"></a>*@
                    <label class="control-label col-md-2"></label>
                    <div class="col-md-10">
                        <div>
                            <table class="table table-bordered UseDataTables">
                                <thead>
                                    <tr>
                                        <th>Username</th>
                                        <th>Full Name</th>
                                        <th>Module</th>
                                        <th>Job Role</th>
                                        <th>Join Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var member in item.RoleInProjects.Where(m => m.IsActive))
                                    {
                                        <tr>
                                            <td>
                                                @member.UserInfo.UserName
                                            </td>
                                            <td>
                                                @member.UserInfo.FullName
                                            </td>
                                            @{
                                                if (member.RoleId == HardFixJobRole.PM)
                                                {
                                                    <td>
                                                        PM
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        @member.Module.Title
                                                    </td>
                                                }
                                            }
                                            <td>
                                                @member.JobRole.Title
                                            </td>
                                            <td>
                                                @member.JoinDate.ToLongDateString()
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
        <hr />
        <div>
            <input type="hidden" name="members" id="members" />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-1">
                    <input id="submit" type="submit" value="Save" class="btn btn-success" />
                </div>
                @if (Model.StatusId == ProjectStatusKey.Opened)
                {
                    <div col-md-6">
                        <a href="@Url.Action("CloseOpen","Project", new {id = Model.Id,status = ProjectStatusKey.Closed})" onclick="return confirm('Are u sure? Close project @Model.Name')" class="btn btn-danger">Close Project</a>
                    </div>
                }
                else
                {
                    <div col-md-6">
                        <a href="@Url.Action("CloseOpen","Project", new {id = Model.Id,status = ProjectStatusKey.Opened})" onclick="return confirm('Are u sure? Open project @Model.Name')" class="btn btn-default">Open Project</a>
                    </div>
                }
            </div>
        </div>
    }
</div>
<div id="memberModal" class="modal fade" role="dialog" data-backdrop="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="$('#memberModal').modal('hide')">&times;</button>
                <h4 class="modal-title">Add member</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <br />
                        <label>User</label><span style="color:red">*</span>
                        <br />
                        <div class="form-inline">
                            <select style="width:100%" type="text" id="user" class="form-control selectpicker" data-show-subtext="true" data-live-search="true">
                                @{
                                    <option value="0"> -- Choose User --</option>
                                    var user = (IEnumerable
                                    <DTO.UserInfo>
                                        )ViewBag.GetUserDoNotInProject;
                                    foreach (var item in user)
                                    {
                                        if (!item.UserName.Equals(User.Identity.GetUserName()))
                                        {
                                            <option value="@item.UserName"> @item.FullName (@item.UserName)</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <br />
                        <p>
                            These users act as a customer or project related people but do not directly participate in the project.
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <br />
                        <label style="width:100% !important" onclick="AddWatcher()" class="btn btn-default"><i class="fas fa-plus-circle"></i></label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.datetimepicker.full.js"></script>
    <script src="~/Scripts/addMemberToProject.js"></script>
    <script>

    </script>
    <script>

        $(document).ready(function () {
            var roleCurrentUser = @Model.GetRoleInModule(User.Identity.GetUserName());
            if (@Model.StatusId==@ProjectStatusKey.Opened || roleCurrentUser == @HardFixJobRole.PM) {
                $("#sidebar4").addClass('active');
                $("#sidebar0").children().attr("href", '@Url.Action("GanttChart", "Project", new { id = Model.Id })')
                $("#sidebar1").children().attr("href", '@Url.Action("KanbanBoard", "Project", new { id = Model.Id })')

                $("#linkSidebar21").attr("href", '@Url.Action("TaskList", "Project", new { id = Model.Id })')
                if (roleCurrentUser !== 0 && roleCurrentUser !== @HardFixJobRole.Watcher) {
                    $("#linkSidebar22").attr("href", '@Url.Action("TaskList", "Project", new { id = Model.Id, createTask =true})')
                }
                else {
                    $("#linkSidebar22").remove();
                }

                $("#linkSidebar2-51").attr("href", '@Url.Action("RequestList", "Project", new { id = Model.Id })')
                if (roleCurrentUser !== @HardFixJobRole.PM) {
                    $("#linkSidebar2-52").attr("href", '@Url.Action("RequestList", "Project", new { id = Model.Id, createTask =true})')
                }
                else {
                    $("#linkSidebar2-52").remove();
                }


                if (roleCurrentUser === @HardFixJobRole.PM) {
                    $("#linkSidebar31").attr("href",'@Url.Action("KanbanBoard", "Project", new { id = Model.Id })')
                    $("#linkSidebar31").attr("href", '@Url.Action("Index", "Module", new { id = Model.Id })')

                    $("#linkSidebar32").attr("href",'@Url.Action("KanbanBoard", "Project", new { id = Model.Id })')
                    $("#linkSidebar32").attr("href", '@Url.Action("Create", "Module", new { id = Model.Id })')

                    $("#sidebar41").attr("href", '@Url.Action("Infomation", "Project", new { id = Model.Id })')
                    $("#sidebar42").attr("href", '@Url.Action("Statistic", "Project", new { id = Model.Id })')
                }
                else {
                    $("#sidebar3").remove();
                    $("#sidebar4").remove();
                }
            }
            else {
                $("#sidebar0").remove();
                $("#sidebar1").remove();
                $("#sidebar2").remove();
                $("#sidebar3").remove();
                $("#sidebar2-5").remove();
                $("#sidebar4").remove();
            }

            var members = JSON.parse('@Html.Raw(ViewBag.WatchersJson)');
            InitListMember(members);
            $('#from').datetimepicker({
                timepicker: false,
                format: 'm/d/Y'
            });
            $('#to').datetimepicker({
                timepicker: false,
                format: 'm/d/Y'
            });

            $('#form').validate({
                errorClass: 'errors',
                rules: {
                    Name: {
                        required: true,
                        maxlength: 100
                    },
                    Code: {
                        required: true,
                        maxlength: 100
                    }
                },
                messages: {
                    Name: {
                        required: "Project name is required",
                        maxlength: "Max length is 100"
                    },
                    Code: {
                        required: "Project Code is required",
                        maxlength: "Max length is 100"
                    }
                },
                highlight: function (element) {
                    $(element).parent().addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).parent().removeClass('has-error');
                },
            });

            $("#submit").click(function () {
                $('#fromValue').val($('#from').val());
                $('#toValue').val($('#to').val());
                $("#members").val(JSON.stringify(listMemeberAndRole));
                alert(JSON.stringify(listMemeberAndRole))
                return $("#form").valid();
            });

            if ("@ViewBag.isSuccess" === "True") {
                $.notify("Success!", "success");
            }
        });

        function ValidateDateTo() {
            $('#to').datetimepicker({
                format: 'm/d/Y',
                timepicker: false,
                minDate: new Date($('#from').val())
            });
        }
    </script>
}
