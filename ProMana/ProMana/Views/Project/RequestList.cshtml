@model DTO.Project
@using COMMON
@using Microsoft.AspNet.Identity

@{
    Layout = "~/Views/Shared/_LayoutProject.cshtml";
    ViewBag.Title = Model.Name;
}
<link href="~/Content/jquery.datetimepicker.min.css" rel="stylesheet" />
<style>
    #noiListTaskDungChan {
        overflow-y: scroll;
        overflow-x: no-display;
        height: 500px;
    }

    #noiDetailDungChan {
        overflow-y: scroll;
        height: 500px;
    }

    .card:hover {
        transform: scale(1, 1.1);
        background-color: #dffff6;
    }

    .cardActive {
        border-style: groove;
        background-color: #dffff6;
    }
</style>

<h2>Request List</h2>

<div class="row">
    <div class="col-md-3">
        <div id="noiListTaskDungChan">
            @foreach (var item in Model.Modules)
            {
                foreach (var task in item.Tasks.Where(m => m.IsActive && !m.IsTask))
                {
                    <div class="card" onclick="chooseTask(this,@task.Id);" id="@String.Format("card{0}",task.Id)" style="width: 100%; background-color:#f6e8e8; padding:10%; transition: transform 1s;">
                        <div class="card-body">
                            <h4 class="card-title"><i class="fas fa-file-invoice"></i> @task.Title</h4>
                            <h6 class="card-subtitle mb-2 text-muted"><label class="label label-default">@task.TaskType</label></h6>
                            <p class="card-text">Created By: @task.UserInfo1.UserName</p>
                            <p class="card-text">Deadline: @task.To</p>
                        </div>
                    </div>
                    <br />
                }
            }
        </div>
    </div>
    <div class="col-md-9" id="noiDetailDungChan">
        Request detail
    </div>
</div>

<!-- Modal -->
<div id="modalCreateTask" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Create Request</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Task/CreateRequest.cshtml", Model)
            </div>
        </div>

    </div>
</div>
<div id="createResult">

</div>
<div id="solutionModalDungChan">

</div>

@section Scripts{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.datetimepicker.full.js"></script>
    <script>
        $(document).ready(function () {
            var roleCurrentUser = @Model.GetRoleInModule(User.Identity.GetUserName());
            $("#sidebar2-5").addClass('active');
            $("#sidebar1").children().attr("href", '@Url.Action("KanbanBoard", "Project", new { id = Model.Id})')

            if (roleCurrentUser !== 0 && roleCurrentUser !== @HardFixJobRole.Watcher) {
                $("#linkSidebar22").attr("href", '@Url.Action("TaskList", "Project", new { id = Model.Id, createTask =true})')
            }
            else {
                $("#linkSidebar22").remove();
            }

            $("#linkSidebar2-51").attr("href", '@Url.Action("RequestList", "Project", new { id = Model.Id})')
            if (roleCurrentUser !== @HardFixJobRole.PM) {
                $("#linkSidebar2-52").attr("href", '@Url.Action("RequestList", "Project", new { id = Model.Id, createTask =true})')
            }
            else {
                $("#linkSidebar2-52").remove();
            }
            

            if (roleCurrentUser === @HardFixJobRole.PM) {
                $("#linkSidebar31").attr("href",'@Url.Action("KanbanBoard", "Project", new { id = Model.Id})')
                $("#linkSidebar31").attr("href", '@Url.Action("Index", "Module", new { id = Model.Id})')

                $("#linkSidebar32").attr("href",'@Url.Action("KanbanBoard", "Project", new { id = Model.Id})')
                $("#linkSidebar32").attr("href", '@Url.Action("Create", "Module", new { id = Model.Id })')

                $("#sidebar41").attr("href", '@Url.Action("Infomation", "Project", new { id = Model.Id })')
            }
            else {
                $("#sidebar3").remove();
                $("#sidebar4").remove();
            }

            validateRequest("create");

            var choosedTask = @ViewBag.ChoosedTask;
            if (choosedTask != "0") {
                var btn = document.getElementById("card" + choosedTask);
                chooseTask(btn, parseInt(choosedTask));
                $("#noiListTaskDungChan").scrollTop($('#card' + choosedTask).position().top);
            }
        });

        function changeModule(element, idAssignee) {
            var moduleId = $(element).val();

            //post data
            $.ajax({
                url: "@Url.Action("GetMemberOption", "Module")/" + moduleId,
                cache: false,
                processData: false,
                contentType: false,
                type: 'GET',
                data: {
                },
                success: function (result) {
                    if (result !== "0") {
                        $("#"+idAssignee).html(result);
                    }
                }
            });
        }

        function chooseTask(btn, taskId) {
            if (btn != null) {
                $(".card").removeClass("cardActive");
                $(btn).addClass("cardActive");
            }
            //post data
            $.ajax({
                url: "@Url.Action("DetailsRequest","Task")/" + taskId,
                cache: false,
                processData: false,
                contentType: false,
                type: 'GET',
                data: {
                },
                success: function (result) {
                    if (result !== "0" && result !== "1") {
                        $("#noiDetailDungChan").html(result);
                    }
                }
            });
        }

        var currentTaskId=null;
        function chooseEditTask(taskId) {
            currentTaskId = taskId;
            //post data
            $.ajax({
                url: "@Url.Action("ConvertToTask", "Task")/" + taskId,
                cache: false,
                processData: false,
                contentType: false,
                type: 'GET',
                data: {
                    'taskId': taskId
                },
                success: function (result) {
                    if (result !== "0" && result !== "1") {
                        $("#noiDetailDungChan").html(result);
                        validateTask("edit");
                    }
                }
            });
        }

        function chooseEditRequest(taskId) {
            currentTaskId = taskId;
            //post data
            $.ajax({
                url: "@Url.Action("EditRequest","Task")/" + taskId,
                cache: false,
                processData: false,
                contentType: false,
                type: 'GET',
                data: {
                    'taskId': taskId
                },
                success: function (result) {
                    if (result !== "0" && result !== "1") {
                        $("#noiDetailDungChan").html(result);
                        validateRequest("edit");
                    }
                }
            });
        }
        var isCreateTask = "@ViewBag.IsCreateTask";
        if (isCreateTask =="True") {
            $("#modalCreateTask").modal("show");
        }
    </script>

    <script>
        function validateRequest(mode) {
            $('#' + mode + 'From').datetimepicker({
                timepicker: true,
                format: 'm/d/Y h:m'
            });
            $('#' + mode + 'To').datetimepicker({
                timepicker: true,
                format: 'm/d/Y h:m'
            });

            $('#' + mode + 'FormTask').validate({
                errorClass: 'errors',
                rules: {
                    Title: {
                        required: true,
                        maxlength: 100
                    },
                    From: {
                        required: true,
                        maxlength: 100
                    },
                    To: {
                        required: true,
                        maxlength: 100
                    }
                },
                messages: {
                    Title: {
                        required: "Title is required",
                        maxlength: "Max length is 100"
                    },
                    From: {
                        required: "From date is required",
                        maxlength: "Max length is 100"
                    },
                    To: {
                        required: "To date is required",
                        maxlength: "Max length is 100"
                    }
                },
                highlight: function (element) {
                    $(element).parent().addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).parent().removeClass('has-error');
                },
            });

            $("#" + mode + "Submit").click(function () {
                var result = true;
                if ($("#" + mode + "TaskTypeId").val() === "0") {
                    $("#" + mode + "TaskTypeId").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "ModuleId").val() === "0") {
                    $("#" + mode + "ModuleId").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "Severity").val() === "0") {
                    $("#" + mode + "Severity").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "Priority").val() === "0") {
                    $("#" + mode + "Priority").parent().addClass('has-error');
                    result = false;
                }

                if ($("#" + mode + "TaskTypeId").val() === "other") {
                    $("#" + mode + "TaskTypeValue").val($("#" + mode + "TaskTypeOther input").val());
                }
                else {
                    $("#" + mode + "TaskTypeValue").val($("#" + mode + "TaskTypeId").val());
                }

                return $("#" + mode + "FormTask").valid() && result;
            })
        }

        function validateTask(mode) {
            $('#' + mode + 'From').datetimepicker({
                timepicker: true,
                format: 'm/d/Y h:m'
            });
            $('#' + mode + 'To').datetimepicker({
                timepicker: true,
                format: 'm/d/Y h:m'
            });

            $('#' + mode + 'FormTask').validate({
                errorClass: 'errors',
                rules: {
                    Title: {
                        required: true,
                        maxlength: 100
                    },
                    From: {
                        required: true,
                        maxlength: 100
                    },
                    To: {
                        required: true,
                        maxlength: 100
                    }
                },
                messages: {
                    Title: {
                        required: "Title is required",
                        maxlength: "Max length is 100"
                    },
                    From: {
                        required: "From date is required",
                        maxlength: "Max length is 100"
                    },
                    To: {
                        required: "To date is required",
                        maxlength: "Max length is 100"
                    }
                },
                highlight: function (element) {
                    $(element).parent().addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).parent().removeClass('has-error');
                },
            });

            $("#" + mode + "Submit").click(function () {
                var result = true;
                if ($("#" + mode + "AssignedTo").val() === "0") {
                    $("#createAssignedTo").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "TaskTypeId").val() === "0") {
                    $("#" + mode + "TaskTypeId").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "ModuleId").val() === "0") {
                    $("#" + mode + "ModuleId").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "Severity").val() === "0") {
                    $("#" + mode + "Severity").parent().addClass('has-error');
                    result = false;
                }
                if ($("#" + mode + "Priority").val() === "0") {
                    $("#" + mode + "Priority").parent().addClass('has-error');
                    result = false;
                }

                if ($("#" + mode + "TaskTypeId").val() === "other") {
                    $("#" + mode + "TaskTypeId").val($("#" + mode + "TaskTypeOther input").val());
                }

                return $("#" + mode + "FormTask").valid() && result;
            })
        }

        function ChangeTaskType(item, idTextBox) {
            if ($(item).val() === "other") {
                $("#" + idTextBox).removeClass("hidden");
            }
            else {
                $("#" + idTextBox).addClass("hidden");
            }
        }

        function ValidateDateTo(mode) {
            $('#' + mode+'To').datetimepicker({
                format: 'm/d/Y h:m',
                timepicker: true,
                minDate: new Date($('#' + mode+'From').val())
            });
        }

        function resetSumarry() {
            if (currentTaskId != null) {
                    //post data
                    $.ajax({
                        url: "@Url.Action("DetailsRequest","Task")?id=" + currentTaskId + "&isSummary=true",
                        cache: false,
                        processData: false,
                        contentType: false,
                        type: 'GET',
                        data: {
                        },
                        success: function (result) {
                            if (result !== "0" && result !== "1") {
                                $("#card" + currentTaskId).html(result);
                            }
                        }
                    });
                }
        }


        function closeModalSolutionDetail(solutionId) {
            $("#solutionModal" + solutionId).modal('hide')
        }
    </script>
}
